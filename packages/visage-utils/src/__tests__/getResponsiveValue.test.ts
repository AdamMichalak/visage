import { getResponsiveValue } from '../getResponsiveValue';

describe('getResponsiveValue', () => {
  const cases: [number, any, any, any][] = [
    [0, 'a', undefined, 'a'],
    [0, 'a', null, null],
    [0, 'a', false, false],
    [0, 'a', 10, 10],
    [0, 'a', 'b', 'b'],
    [0, 'a', [undefined], 'a'],
    [0, 'a', [null], null],
    [0, 'a', [false], false],
    [0, 'a', [10], 10],
    [0, 'a', ['b'], 'b'],
    [0, undefined, undefined, undefined],
    [0, undefined, null, null],
    [0, undefined, false, false],
    [0, undefined, 10, 10],
    [0, undefined, 'b', 'b'],
    [0, undefined, [undefined], undefined],
    [0, undefined, [null], null],
    [0, undefined, [false], false],
    [0, undefined, [10], 10],
    [0, undefined, ['b'], 'b'],
    [0, null, undefined, null],
    [0, null, null, null],
    [0, null, false, false],
    [0, null, 10, 10],
    [0, null, 'b', 'b'],
    [0, null, [undefined], null],
    [0, null, [null], null],
    [0, null, [false], false],
    [0, null, [10], 10],
    [0, null, ['b'], 'b'],
    [0, false, undefined, false],
    [0, false, null, null],
    [0, false, 10, 10],
    [0, false, 'b', 'b'],
    [0, false, [undefined], false],
    [0, false, [null], null],
    [0, false, [10], 10],
    [0, false, ['b'], 'b'],
    [1, [1, undefined, 2], undefined, 1],
    [1, [1, undefined, 2], null, null],
    [1, [1, undefined, 2], 1, 1],
    [1, [1, undefined, 2], [undefined], 1],
    [1, [1, undefined, 2], [null], 1],
    [1, [1, undefined, 2], [1], 1],
    [1, [1, undefined, 2], [3, undefined], 1],
    [1, [1, undefined, 2], [3, null], null],
    [1, [1, undefined, 2], [3, 4], 4],
    [1, [1, null, 2], [3, undefined], null],
    [1, [1, null, 2], [3, null], null],
    [1, [1, null, 2], [3, 4], 4],
    [1, [1, 0, 2], [3, undefined], 0],
    [1, [1, 0, 2], [3, null], null],
    [1, [1, 0, 2], [3, 4], 4],
    [1, [1, null, 2], null, null],
    [2, [1, undefined, 2], undefined, 2],
    [2, [1, null, 2], undefined, 2],
    [2, [1, null, 2], 10, 10],
    [2, [1, null, 2], [null, null, undefined], 2],
    [2, [1, null, 2], [null, null, null], null],
    [2, [1, null, 2], [null, null, 10], 10],
  ];

  it.each(cases)(
    'works for breakpoint %i, default %p, new %p',
    (breakpoint: number, defaultValue: any, newValue: any, expected: any) => {
      expect(getResponsiveValue(breakpoint, defaultValue, newValue)).toBe(
        expected,
      );
    },
  );
});
