/**
 * This file is generated by ../../tooles/generateaComponentType.js
 */

import { ComponentClass, FunctionComponent, ReactElement } from 'react';
import { Theme } from './theme';

export interface ComponentFactory<TDefaultStylingProps> {
  <
    P,
    TStylingProps = TDefaultStylingProps,
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: P,
        styleProps: TStylingProps,
      ) => any;
    }
  >(
    As: FunctionComponent<P>,
    options?: {
      defaultProps?: P & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    P,
    TStylingProps &
      Partial<
        { [K in keyof TStylingProps]: { [EK in keyof TExtraStylers]: any } }
      >
  >;
  <
    P,
    TStylingProps = TDefaultStylingProps,
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: P,
        styleProps: TStylingProps,
      ) => any;
    }
  >(
    As: ComponentClass<P>,
    options?: {
      defaultProps?: P & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    P,
    TStylingProps &
      Partial<
        { [K in keyof TStylingProps]: { [EK in keyof TExtraStylers]: any } }
      >
  >;
  <
    P,
    PS,
    TStylingProps = TDefaultStylingProps,
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: P,
        styleProps: TStylingProps,
      ) => any;
    }
  >(
    As: VisageComponent<P, PS>,
    options?: {
      defaultProps?: P & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    P & PS,
    TStylingProps &
      Partial<
        { [K in keyof TStylingProps]: { [EK in keyof TExtraStylers]: any } }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['a'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'a',
    options?: {
      defaultProps?: JSX.IntrinsicElements['a'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['a'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['abbr'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'abbr',
    options?: {
      defaultProps?: JSX.IntrinsicElements['abbr'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['abbr'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['address'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'address',
    options?: {
      defaultProps?: JSX.IntrinsicElements['address'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['address'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['area'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'area',
    options?: {
      defaultProps?: JSX.IntrinsicElements['area'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['area'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['article'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'article',
    options?: {
      defaultProps?: JSX.IntrinsicElements['article'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['article'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['aside'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'aside',
    options?: {
      defaultProps?: JSX.IntrinsicElements['aside'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['aside'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['audio'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'audio',
    options?: {
      defaultProps?: JSX.IntrinsicElements['audio'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['audio'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['b'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'b',
    options?: {
      defaultProps?: JSX.IntrinsicElements['b'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['b'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['base'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'base',
    options?: {
      defaultProps?: JSX.IntrinsicElements['base'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['base'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['bdi'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'bdi',
    options?: {
      defaultProps?: JSX.IntrinsicElements['bdi'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['bdi'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['bdo'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'bdo',
    options?: {
      defaultProps?: JSX.IntrinsicElements['bdo'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['bdo'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['blockquote'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'blockquote',
    options?: {
      defaultProps?: JSX.IntrinsicElements['blockquote'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['blockquote'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['body'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'body',
    options?: {
      defaultProps?: JSX.IntrinsicElements['body'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['body'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['br'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'br',
    options?: {
      defaultProps?: JSX.IntrinsicElements['br'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['br'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['button'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'button',
    options?: {
      defaultProps?: JSX.IntrinsicElements['button'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['button'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['canvas'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'canvas',
    options?: {
      defaultProps?: JSX.IntrinsicElements['canvas'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['canvas'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['caption'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'caption',
    options?: {
      defaultProps?: JSX.IntrinsicElements['caption'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['caption'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['cite'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'cite',
    options?: {
      defaultProps?: JSX.IntrinsicElements['cite'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['cite'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['code'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'code',
    options?: {
      defaultProps?: JSX.IntrinsicElements['code'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['code'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['col'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'col',
    options?: {
      defaultProps?: JSX.IntrinsicElements['col'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['col'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['colgroup'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'colgroup',
    options?: {
      defaultProps?: JSX.IntrinsicElements['colgroup'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['colgroup'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['data'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'data',
    options?: {
      defaultProps?: JSX.IntrinsicElements['data'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['data'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['datalist'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'datalist',
    options?: {
      defaultProps?: JSX.IntrinsicElements['datalist'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['datalist'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['dd'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'dd',
    options?: {
      defaultProps?: JSX.IntrinsicElements['dd'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['dd'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['del'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'del',
    options?: {
      defaultProps?: JSX.IntrinsicElements['del'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['del'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['details'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'details',
    options?: {
      defaultProps?: JSX.IntrinsicElements['details'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['details'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['dfn'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'dfn',
    options?: {
      defaultProps?: JSX.IntrinsicElements['dfn'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['dfn'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['dialog'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'dialog',
    options?: {
      defaultProps?: JSX.IntrinsicElements['dialog'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['dialog'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['div'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'div',
    options?: {
      defaultProps?: JSX.IntrinsicElements['div'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['div'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['dl'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'dl',
    options?: {
      defaultProps?: JSX.IntrinsicElements['dl'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['dl'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['dt'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'dt',
    options?: {
      defaultProps?: JSX.IntrinsicElements['dt'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['dt'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['em'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'em',
    options?: {
      defaultProps?: JSX.IntrinsicElements['em'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['em'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['embed'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'embed',
    options?: {
      defaultProps?: JSX.IntrinsicElements['embed'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['embed'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['fieldset'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'fieldset',
    options?: {
      defaultProps?: JSX.IntrinsicElements['fieldset'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['fieldset'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['figcaption'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'figcaption',
    options?: {
      defaultProps?: JSX.IntrinsicElements['figcaption'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['figcaption'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['figure'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'figure',
    options?: {
      defaultProps?: JSX.IntrinsicElements['figure'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['figure'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['footer'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'footer',
    options?: {
      defaultProps?: JSX.IntrinsicElements['footer'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['footer'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['form'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'form',
    options?: {
      defaultProps?: JSX.IntrinsicElements['form'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['form'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['h1'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'h1',
    options?: {
      defaultProps?: JSX.IntrinsicElements['h1'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['h1'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['h2'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'h2',
    options?: {
      defaultProps?: JSX.IntrinsicElements['h2'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['h2'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['h3'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'h3',
    options?: {
      defaultProps?: JSX.IntrinsicElements['h3'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['h3'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['h4'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'h4',
    options?: {
      defaultProps?: JSX.IntrinsicElements['h4'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['h4'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['h5'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'h5',
    options?: {
      defaultProps?: JSX.IntrinsicElements['h5'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['h5'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['h6'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'h6',
    options?: {
      defaultProps?: JSX.IntrinsicElements['h6'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['h6'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['head'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'head',
    options?: {
      defaultProps?: JSX.IntrinsicElements['head'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['head'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['header'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'header',
    options?: {
      defaultProps?: JSX.IntrinsicElements['header'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['header'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['hgroup'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'hgroup',
    options?: {
      defaultProps?: JSX.IntrinsicElements['hgroup'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['hgroup'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['hr'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'hr',
    options?: {
      defaultProps?: JSX.IntrinsicElements['hr'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['hr'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['html'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'html',
    options?: {
      defaultProps?: JSX.IntrinsicElements['html'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['html'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['i'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'i',
    options?: {
      defaultProps?: JSX.IntrinsicElements['i'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['i'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['iframe'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'iframe',
    options?: {
      defaultProps?: JSX.IntrinsicElements['iframe'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['iframe'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['img'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'img',
    options?: {
      defaultProps?: JSX.IntrinsicElements['img'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['img'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['input'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'input',
    options?: {
      defaultProps?: JSX.IntrinsicElements['input'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['input'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['ins'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'ins',
    options?: {
      defaultProps?: JSX.IntrinsicElements['ins'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['ins'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['kbd'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'kbd',
    options?: {
      defaultProps?: JSX.IntrinsicElements['kbd'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['kbd'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['keygen'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'keygen',
    options?: {
      defaultProps?: JSX.IntrinsicElements['keygen'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['keygen'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['label'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'label',
    options?: {
      defaultProps?: JSX.IntrinsicElements['label'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['label'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['legend'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'legend',
    options?: {
      defaultProps?: JSX.IntrinsicElements['legend'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['legend'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['li'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'li',
    options?: {
      defaultProps?: JSX.IntrinsicElements['li'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['li'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['link'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'link',
    options?: {
      defaultProps?: JSX.IntrinsicElements['link'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['link'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['main'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'main',
    options?: {
      defaultProps?: JSX.IntrinsicElements['main'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['main'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['map'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'map',
    options?: {
      defaultProps?: JSX.IntrinsicElements['map'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['map'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['mark'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'mark',
    options?: {
      defaultProps?: JSX.IntrinsicElements['mark'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['mark'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['menu'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'menu',
    options?: {
      defaultProps?: JSX.IntrinsicElements['menu'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['menu'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['menuitem'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'menuitem',
    options?: {
      defaultProps?: JSX.IntrinsicElements['menuitem'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['menuitem'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['meta'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'meta',
    options?: {
      defaultProps?: JSX.IntrinsicElements['meta'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['meta'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['meter'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'meter',
    options?: {
      defaultProps?: JSX.IntrinsicElements['meter'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['meter'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['nav'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'nav',
    options?: {
      defaultProps?: JSX.IntrinsicElements['nav'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['nav'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['noscript'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'noscript',
    options?: {
      defaultProps?: JSX.IntrinsicElements['noscript'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['noscript'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['object'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'object',
    options?: {
      defaultProps?: JSX.IntrinsicElements['object'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['object'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['ol'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'ol',
    options?: {
      defaultProps?: JSX.IntrinsicElements['ol'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['ol'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['optgroup'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'optgroup',
    options?: {
      defaultProps?: JSX.IntrinsicElements['optgroup'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['optgroup'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['option'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'option',
    options?: {
      defaultProps?: JSX.IntrinsicElements['option'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['option'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['output'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'output',
    options?: {
      defaultProps?: JSX.IntrinsicElements['output'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['output'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['p'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'p',
    options?: {
      defaultProps?: JSX.IntrinsicElements['p'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['p'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['param'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'param',
    options?: {
      defaultProps?: JSX.IntrinsicElements['param'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['param'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['picture'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'picture',
    options?: {
      defaultProps?: JSX.IntrinsicElements['picture'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['picture'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['pre'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'pre',
    options?: {
      defaultProps?: JSX.IntrinsicElements['pre'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['pre'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['progress'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'progress',
    options?: {
      defaultProps?: JSX.IntrinsicElements['progress'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['progress'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['q'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'q',
    options?: {
      defaultProps?: JSX.IntrinsicElements['q'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['q'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['rp'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'rp',
    options?: {
      defaultProps?: JSX.IntrinsicElements['rp'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['rp'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['rt'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'rt',
    options?: {
      defaultProps?: JSX.IntrinsicElements['rt'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['rt'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['ruby'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'ruby',
    options?: {
      defaultProps?: JSX.IntrinsicElements['ruby'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['ruby'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['s'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 's',
    options?: {
      defaultProps?: JSX.IntrinsicElements['s'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['s'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['samp'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'samp',
    options?: {
      defaultProps?: JSX.IntrinsicElements['samp'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['samp'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['script'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'script',
    options?: {
      defaultProps?: JSX.IntrinsicElements['script'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['script'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['section'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'section',
    options?: {
      defaultProps?: JSX.IntrinsicElements['section'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['section'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['select'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'select',
    options?: {
      defaultProps?: JSX.IntrinsicElements['select'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['select'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['small'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'small',
    options?: {
      defaultProps?: JSX.IntrinsicElements['small'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['small'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['source'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'source',
    options?: {
      defaultProps?: JSX.IntrinsicElements['source'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['source'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['span'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'span',
    options?: {
      defaultProps?: JSX.IntrinsicElements['span'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['span'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['strong'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'strong',
    options?: {
      defaultProps?: JSX.IntrinsicElements['strong'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['strong'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['style'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'style',
    options?: {
      defaultProps?: JSX.IntrinsicElements['style'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['style'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['sub'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'sub',
    options?: {
      defaultProps?: JSX.IntrinsicElements['sub'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['sub'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['summary'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'summary',
    options?: {
      defaultProps?: JSX.IntrinsicElements['summary'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['summary'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['sup'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'sup',
    options?: {
      defaultProps?: JSX.IntrinsicElements['sup'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['sup'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['svg'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'svg',
    options?: {
      defaultProps?: JSX.IntrinsicElements['svg'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['svg'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['table'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'table',
    options?: {
      defaultProps?: JSX.IntrinsicElements['table'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['table'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['tbody'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'tbody',
    options?: {
      defaultProps?: JSX.IntrinsicElements['tbody'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['tbody'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['td'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'td',
    options?: {
      defaultProps?: JSX.IntrinsicElements['td'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['td'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['textarea'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'textarea',
    options?: {
      defaultProps?: JSX.IntrinsicElements['textarea'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['textarea'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['tfoot'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'tfoot',
    options?: {
      defaultProps?: JSX.IntrinsicElements['tfoot'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['tfoot'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['th'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'th',
    options?: {
      defaultProps?: JSX.IntrinsicElements['th'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['th'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['thead'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'thead',
    options?: {
      defaultProps?: JSX.IntrinsicElements['thead'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['thead'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['time'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'time',
    options?: {
      defaultProps?: JSX.IntrinsicElements['time'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['time'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['title'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'title',
    options?: {
      defaultProps?: JSX.IntrinsicElements['title'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['title'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['tr'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'tr',
    options?: {
      defaultProps?: JSX.IntrinsicElements['tr'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['tr'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['track'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'track',
    options?: {
      defaultProps?: JSX.IntrinsicElements['track'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['track'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['u'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'u',
    options?: {
      defaultProps?: JSX.IntrinsicElements['u'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['u'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['ul'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'ul',
    options?: {
      defaultProps?: JSX.IntrinsicElements['ul'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['ul'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['var'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'var',
    options?: {
      defaultProps?: JSX.IntrinsicElements['var'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['var'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['video'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'video',
    options?: {
      defaultProps?: JSX.IntrinsicElements['video'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['video'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
  <
    TExtraStylers = {
      [key: string]: (
        theme: Theme,
        propValue: any,
        componentProps: JSX.IntrinsicElements['wbr'],
        styleProps: TDefaultStylingProps,
      ) => any;
    }
  >(
    As: 'wbr',
    options?: {
      defaultProps?: JSX.IntrinsicElements['wbr'] & TDefaultStylingProps;
      displayName?: string;
      extraStylers?: TExtraStylers;
    },
  ): VisageComponent<
    JSX.IntrinsicElements['wbr'],
    TDefaultStylingProps &
      Partial<
        {
          [K in keyof TDefaultStylingProps]: {
            [EK in keyof TExtraStylers]: any
          }
        }
      >
  >;
}

export interface VisageComponent<Props = {}, StylingProps = {}> {
  <P>(
    props: { as: FunctionComponent<P> } & StylingProps & P & Props,
    context?: any,
  ): ReactElement | null;
  <P>(
    props: { as: ComponentClass<P> } & StylingProps & P & Props,
    context?: any,
  ): ReactElement | null;
  <P, PS>(
    props: { as: VisageComponent<P, PS> } & StylingProps & PS & P & Props,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'a' } & StylingProps &
      JSX.IntrinsicElements['a'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'abbr' } & StylingProps &
      JSX.IntrinsicElements['abbr'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'address' } & StylingProps &
      JSX.IntrinsicElements['address'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'area' } & StylingProps &
      JSX.IntrinsicElements['area'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'article' } & StylingProps &
      JSX.IntrinsicElements['article'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'aside' } & StylingProps &
      JSX.IntrinsicElements['aside'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'audio' } & StylingProps &
      JSX.IntrinsicElements['audio'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'b' } & StylingProps &
      JSX.IntrinsicElements['b'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'base' } & StylingProps &
      JSX.IntrinsicElements['base'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'bdi' } & StylingProps &
      JSX.IntrinsicElements['bdi'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'bdo' } & StylingProps &
      JSX.IntrinsicElements['bdo'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'blockquote' } & StylingProps &
      JSX.IntrinsicElements['blockquote'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'body' } & StylingProps &
      JSX.IntrinsicElements['body'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'br' } & StylingProps &
      JSX.IntrinsicElements['br'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'button' } & StylingProps &
      JSX.IntrinsicElements['button'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'canvas' } & StylingProps &
      JSX.IntrinsicElements['canvas'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'caption' } & StylingProps &
      JSX.IntrinsicElements['caption'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'cite' } & StylingProps &
      JSX.IntrinsicElements['cite'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'code' } & StylingProps &
      JSX.IntrinsicElements['code'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'col' } & StylingProps &
      JSX.IntrinsicElements['col'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'colgroup' } & StylingProps &
      JSX.IntrinsicElements['colgroup'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'data' } & StylingProps &
      JSX.IntrinsicElements['data'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'datalist' } & StylingProps &
      JSX.IntrinsicElements['datalist'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'dd' } & StylingProps &
      JSX.IntrinsicElements['dd'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'del' } & StylingProps &
      JSX.IntrinsicElements['del'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'details' } & StylingProps &
      JSX.IntrinsicElements['details'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'dfn' } & StylingProps &
      JSX.IntrinsicElements['dfn'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'dialog' } & StylingProps &
      JSX.IntrinsicElements['dialog'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'div' } & StylingProps &
      JSX.IntrinsicElements['div'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'dl' } & StylingProps &
      JSX.IntrinsicElements['dl'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'dt' } & StylingProps &
      JSX.IntrinsicElements['dt'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'em' } & StylingProps &
      JSX.IntrinsicElements['em'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'embed' } & StylingProps &
      JSX.IntrinsicElements['embed'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'fieldset' } & StylingProps &
      JSX.IntrinsicElements['fieldset'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'figcaption' } & StylingProps &
      JSX.IntrinsicElements['figcaption'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'figure' } & StylingProps &
      JSX.IntrinsicElements['figure'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'footer' } & StylingProps &
      JSX.IntrinsicElements['footer'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'form' } & StylingProps &
      JSX.IntrinsicElements['form'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'h1' } & StylingProps &
      JSX.IntrinsicElements['h1'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'h2' } & StylingProps &
      JSX.IntrinsicElements['h2'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'h3' } & StylingProps &
      JSX.IntrinsicElements['h3'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'h4' } & StylingProps &
      JSX.IntrinsicElements['h4'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'h5' } & StylingProps &
      JSX.IntrinsicElements['h5'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'h6' } & StylingProps &
      JSX.IntrinsicElements['h6'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'head' } & StylingProps &
      JSX.IntrinsicElements['head'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'header' } & StylingProps &
      JSX.IntrinsicElements['header'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'hgroup' } & StylingProps &
      JSX.IntrinsicElements['hgroup'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'hr' } & StylingProps &
      JSX.IntrinsicElements['hr'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'html' } & StylingProps &
      JSX.IntrinsicElements['html'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'i' } & StylingProps &
      JSX.IntrinsicElements['i'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'iframe' } & StylingProps &
      JSX.IntrinsicElements['iframe'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'img' } & StylingProps &
      JSX.IntrinsicElements['img'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'input' } & StylingProps &
      JSX.IntrinsicElements['input'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'ins' } & StylingProps &
      JSX.IntrinsicElements['ins'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'kbd' } & StylingProps &
      JSX.IntrinsicElements['kbd'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'keygen' } & StylingProps &
      JSX.IntrinsicElements['keygen'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'label' } & StylingProps &
      JSX.IntrinsicElements['label'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'legend' } & StylingProps &
      JSX.IntrinsicElements['legend'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'li' } & StylingProps &
      JSX.IntrinsicElements['li'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'link' } & StylingProps &
      JSX.IntrinsicElements['link'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'main' } & StylingProps &
      JSX.IntrinsicElements['main'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'map' } & StylingProps &
      JSX.IntrinsicElements['map'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'mark' } & StylingProps &
      JSX.IntrinsicElements['mark'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'menu' } & StylingProps &
      JSX.IntrinsicElements['menu'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'menuitem' } & StylingProps &
      JSX.IntrinsicElements['menuitem'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'meta' } & StylingProps &
      JSX.IntrinsicElements['meta'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'meter' } & StylingProps &
      JSX.IntrinsicElements['meter'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'nav' } & StylingProps &
      JSX.IntrinsicElements['nav'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'noscript' } & StylingProps &
      JSX.IntrinsicElements['noscript'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'object' } & StylingProps &
      JSX.IntrinsicElements['object'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'ol' } & StylingProps &
      JSX.IntrinsicElements['ol'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'optgroup' } & StylingProps &
      JSX.IntrinsicElements['optgroup'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'option' } & StylingProps &
      JSX.IntrinsicElements['option'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'output' } & StylingProps &
      JSX.IntrinsicElements['output'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'p' } & StylingProps &
      JSX.IntrinsicElements['p'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'param' } & StylingProps &
      JSX.IntrinsicElements['param'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'picture' } & StylingProps &
      JSX.IntrinsicElements['picture'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'pre' } & StylingProps &
      JSX.IntrinsicElements['pre'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'progress' } & StylingProps &
      JSX.IntrinsicElements['progress'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'q' } & StylingProps &
      JSX.IntrinsicElements['q'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'rp' } & StylingProps &
      JSX.IntrinsicElements['rp'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'rt' } & StylingProps &
      JSX.IntrinsicElements['rt'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'ruby' } & StylingProps &
      JSX.IntrinsicElements['ruby'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 's' } & StylingProps &
      JSX.IntrinsicElements['s'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'samp' } & StylingProps &
      JSX.IntrinsicElements['samp'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'script' } & StylingProps &
      JSX.IntrinsicElements['script'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'section' } & StylingProps &
      JSX.IntrinsicElements['section'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'select' } & StylingProps &
      JSX.IntrinsicElements['select'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'small' } & StylingProps &
      JSX.IntrinsicElements['small'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'source' } & StylingProps &
      JSX.IntrinsicElements['source'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'span' } & StylingProps &
      JSX.IntrinsicElements['span'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'strong' } & StylingProps &
      JSX.IntrinsicElements['strong'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'style' } & StylingProps &
      JSX.IntrinsicElements['style'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'sub' } & StylingProps &
      JSX.IntrinsicElements['sub'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'summary' } & StylingProps &
      JSX.IntrinsicElements['summary'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'sup' } & StylingProps &
      JSX.IntrinsicElements['sup'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'svg' } & StylingProps &
      JSX.IntrinsicElements['svg'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'table' } & StylingProps &
      JSX.IntrinsicElements['table'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'tbody' } & StylingProps &
      JSX.IntrinsicElements['tbody'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'td' } & StylingProps &
      JSX.IntrinsicElements['td'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'textarea' } & StylingProps &
      JSX.IntrinsicElements['textarea'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'tfoot' } & StylingProps &
      JSX.IntrinsicElements['tfoot'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'th' } & StylingProps &
      JSX.IntrinsicElements['th'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'thead' } & StylingProps &
      JSX.IntrinsicElements['thead'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'time' } & StylingProps &
      JSX.IntrinsicElements['time'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'title' } & StylingProps &
      JSX.IntrinsicElements['title'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'tr' } & StylingProps &
      JSX.IntrinsicElements['tr'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'track' } & StylingProps &
      JSX.IntrinsicElements['track'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'u' } & StylingProps &
      JSX.IntrinsicElements['u'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'ul' } & StylingProps &
      JSX.IntrinsicElements['ul'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'var' } & StylingProps &
      JSX.IntrinsicElements['var'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'video' } & StylingProps &
      JSX.IntrinsicElements['video'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: { as: 'wbr' } & StylingProps &
      JSX.IntrinsicElements['wbr'] /* & Props */,
    context?: any,
  ): ReactElement | null;
  (
    props: {
      as?:
        | FunctionComponent<any>
        | ComponentClass<any>
        | VisageComponent
        | keyof JSX.IntrinsicElements;
    } & StylingProps &
      Props,
    context?: any,
  ): ReactElement | null;
}
